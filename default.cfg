## config file for fakewake.py
##
## any values not found will use the internal defaults
##
## default values are prefixed with ; below

[pins]
## gpio pin assignments BCM numbering
## set to 0 to disable feature but note that disabling
##   power_pin defeats the object of this tool
;power:23
;reset:24

## if psu_sense is not enabled (i.e. is 0) wol support will
##   be disabled as it could cause an unexpected shutdown or reset
;psu_sense:25
## set to True if your PSU sense hardware pulls the pin low when the PSU
##   is on.
;psu_sense_active_low:False

## the M74HC4066B1R contains 4 switches.
## these may be used in the same way as 'power' and 'reset'
##   by setting non-zero values
## only 'short' button press durations are currently supported
##   on these
;aux1:0
;aux2:0


[timings]
## button press durations (seconds)
## long must be greater than 4.0 for most PCs
;short:0.1
;long:5.0

## minimum interval between actions (seconds)
## must be greater than LONG_PRESS
##   and should be greater than the expected boot/shutdown time
##   of the target PC
## must also be less than any configured screen power off/sleep
##   time on the target PC as some OS use the power button as a
# wake trigger from this state(PC on but screens off)
;min_interval:180.0


[webserver]
## webserver
;web_enabled:True

## uncomment to bind webserver to a specific interface
## default is to bind to all available interfaces
#host:localhost

## to use a port number < 1024 fakewake must be started as root
;web_port:8080

## time between automatic page reloads in seconds
## should be longer than "long" above
;reload_delay:15


[wol]
## wake on lan
;wol_enabled:False

## comma seperated list of UDP ports to listen on for wol packets
## to use a port number < 1024 fakewake must be started as root 
;wol_ports:7,9,7491

## MAC addresses must be written 00:11:22:33:44:55
## all four addresses must be different
## it's best to use mac addresses in the "locally administered"
##   range i.e. 
##            x2:xx:xx:xx:xx:xx
##            x6:xx:xx:xx:xx:xx
##            xA:xx:xx:xx:xx:xx
##            xE:xx:xx:xx:xx:xx
##   where x is any hexadecimal digit
## to avoid conflicts none of these should exist on your LAN.
#wake_mac:EE:11:22:33:44:00

## Only uncomment and populate these three if you want to
##   abuse wake on lan ;)
## magic packets sent to these addresses will perform the
##   relevant action
#shutdown_mac:EE:11:22:33:44:01
#reset_mac:EE:11:22:33:44:02
#forceoff_mac:EE:11:22:33:44:03

## uncomment if using the aux channels
## aux channels will fire regardless of PSU state when a magic
##   packet is received
#aux1_mac:EE:11:22:33:44:03
#aux2_mac:EE:11:22:33:44:03


[pinger]
## setting will be treated as False if no targets are specified
;pinger_enabled:True
## target name or ip address. multiple targets must be seperated by ,
##   e.g. foo,bar,10.0.0.1
#target: 127.0.0.1,localhost

## interval between pings(seconds)
;interval:1.0


[threads]
## specify whether to restart any failed threads
## threads using ports < 1024 will not restart once root privialges
##   have been dropped
restart:True


[security]
## host ip based security measure
## comma seperated list of ipv4 addresses
##
## functions in a similar manner to the system files
## hosts.allow and hosts.deny:
##   Access will be granted when a client's ip address matches an entry in hosts_allow.
##   Otherwise, access will be denied when a client's ip address matches an entry in hosts_allow.
##   Otherwise, access will be granted.
##
## default is to allow all ip addresses and deny none
## use * for hosts_deny to block all addresses except those in hosts_allow
## example 1: allow access from any ip address
;hosts_allow=''
;hosts_deny=''
### example 2: block all clients except those on localhost
#hosts_allow=127.0.0.1
#hosts_deny=*

# privileges management
# whether to drop root privilages
;drop_privs=True
# user to drop to when started as root after ports have been bound.
;user=nobody
